name: build and plan
description: Github Action to build (Docker) and plan (Terraform) changes.
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  tf-version:
    description: 'Terraform version. Example: "1.3.4".'
    required: false
    type: string
    default: "1.3.4"
  tf-api-token:
    description: 'Terraform cloud API token.'
    required: true
    type: string
  ssh-key:
    description: 'SSH key.'
    required: true
    type: string
  droplet-host:
    description: 'Host of the droplet. Example: "172.16.254.1".'
    required: true
    type: string
  env:
    description: 'Environment. Example: "prod".'
    required: true
    type: string
  github-token:
    description: 'GitHub token.'
    required: true
    type: string
  droplet-user:
    description: 'User to run commands in the droplet. Example: "ubuntu".'
    required: true
    type: string
  compose-config-args:
    description: 'Docker compose config arguments. Example: "-f production.yml".'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: checkout code repository
      uses: actions/checkout@v3

    - name: setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: {% raw %}${{ inputs.tf-version }}{% endraw %}
        cli_config_credentials_token: {% raw %}${{ inputs.tf-api-token }}{% endraw %}

    - name: install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: {% raw %}${{ inputs.ssh-key }}{% endraw %}
        name: id_rsa # optional
        known_hosts: unnecessary
        if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
     
    - name: add known hosts
      run: ssh-keyscan -H {% raw %}${{ inputs.droplet-host }}{% endraw %} >> ~/.ssh/known_hosts

    - name: initialize terraform
      run: make init-{% raw %}${{ inputs.env }}{% endraw %} TF_FLAGS="-input=false"

    - name: plan terraform
      id: plan
      continue-on-error: true
      run: make plan-{% raw %}${{ inputs.env }}{% endraw %} TF_FLAGS="-input=false -no-color"

    - name: apply terraform
      if: steps.plan.outcome == 'success'
      id: apply
      continue-on-error: true
      run: make apply-{% raw %}${{ inputs.env }}{% endraw %} TF_FLAGS="-auto-approve -input=false -no-color"
      
    - name: post plan and apply to github PR
      if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: {% raw %}${{ inputs.github-token }}{% endraw %}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Applying **{% raw %}${{ inputs.env }}{% endraw %}**:
          ```diff
          {% raw %}${{ steps.plan.outputs.stdout }}{% endraw %}
          ```
          ```
          {% raw %}${{ steps.apply.outputs.stdout }}{% endraw %}
          ```

    - name: add plan failure to PR
      if: steps.plan.outcome == 'failure'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: {% raw %}${{ inputs.github-token }}{% endraw %}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Plan failed for **{% raw %}${{ inputs.env }}{% endraw %}**:
          ```
          {% raw %}${{ steps.plan.outputs.stderr }}{% endraw %}
          ```

    - name: fail if plan fails
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: add apply failure to PR
      if: steps.apply.outcome == 'failure'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: {% raw %}${{ inputs.github-token }}{% endraw %}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Apply failed for **{% raw %}${{ inputs.env }}{% endraw %}**:
          ```
          {% raw %}${{ steps.apply.outputs.stderr }}{% endraw %}
          ```

    - name: fail if apply fails
      if: steps.apply.outcome == 'failure'
      run: exit 1

    - name: deploy with rsync
      run: rsync -avz ./app {% raw %}${{ inputs.droplet-user }}{% endraw %}@{% raw %}${{ inputs.droplet-host }}{% endraw %}:~

    - name: docker compose up
      uses: appleboy/ssh-action@master
      with:
        host: {% raw %}${{ inputs.droplet-host }}{% endraw %}
        username: {% raw %}${{ inputs.droplet-user }}{% endraw %}
        key: {% raw %}${{ inputs.ssh-key }}{% endraw %}
        script: docker-compose {% raw %}${{ inputs.compose-config-args }}{% endraw %} up -d --build
